/**
* Define component configuration for a brand.
*
* @access public
* @param {string} $component
* @param {string} $brand
* @param {map} $config
**/
/**
* Check the default brand is configured. Otherwise using o-brand is not allowed.
* The default brand must be configured by the component as it is the fallback.
*
* @access private
* @param {string} $component
* @return {boolean}
**/
/**
* Gets a variable for the current brand and configured for variant.
* If multiple variables are requested they are concatenated for use as one property.
*
* @example
*     @oBrandGet('example-border-size', 'example-border-style', 'example-border-color'); // 1px solid red
*     @oBrandGet('inverse-stripe-color'); // black
*
* @access public
* @param {string} $component
* @param {arglist} $variables
* @return {string | number | color | null}
**/
/**
* Configures a content block for a brand variant.
* A single variant (string) or compound variant (list) is accepted.
* This mixin may also be nested to target compound variants.
* The content block will only be output in the brand supports the variant.
* Calls for brand variables within will return the value for the configured variant.
*
* @example
*     oBrandConfigureFor('inverse') {
*        // Will use configuration for the 'inverse' variant when getting variable values.
*        // This will not be output if the brand does not support the "inverse" variant.
*       oBrandConfigureFor('b2b') {
*            // Will use configuration for the compound variant 'inverse,b2b' when fetching variable values.
*       }
*     }
*
* @example
*     oBrandConfigureFor(('inverse', 'b2b')) {
*        // Will use configuration for the compound variant 'inverse,b2b' when fetching variable values.
*     }
*
* @access public
* @param {string} $component
* @param {string | list} $variant
**/
/**
* Check the brand's configured settings to see if it supports a variant.
* Using this function and a conditional may make sense if there is no variant specific configuration.
* However `oBrandConfigureFor` should be used instead where possible.
* Doing so will support variant specific configuration in the future without code changes.
*
* @see oBrandConfigureFor
* @access private
* @param {string} $component
* @param {string | list} $variant
* @return {boolean}
**/
/**
* Gets a variable for the current brand and variant.
*
* @access private
* @param {string} $component
* @param {string} $variable
* @return {string | number | color | null}
**/
/**
* Update the current variant to with a new variant.
* If a variant is already set they are compounded.
*
* @access private
* @param {string} $component
* @param {string | list} $variant
**/
/**
* Update the current variant by removing a variant.
*
* @access private
* @param {string} $component
* @param {string | list} $variant
**/
/**
* Get all config for a given component and brand.
*
* @access private
* @param {string} $component
* @param {string} $brand
* @return {map}
**/
/**
* Quick sort alphanumeric list.
*
* @access private
* @param {list} $list The list to sort.
* @return {list}
**/
/**
* Get the current number of compound variants (depth) of a component.
*
* @access private
* @param {string} $component
* @return {number}
**/
/**
* Update the current number of compound variants (depth) of a component.
*
* @access private
* @param {string} $component
* @param {number} $current-depth
* @return {number}
**/
/**
* Get the current variant of a component.
*
* @access private
* @param {string} $component
* @return {list}
**/
/**
* Update the current variant of a component.
*
* @access private
* @param {string} $component
* @param {string | list} $current-variant
* @return {list}
**/
/**
* Compares two strings to determine which comes first.
* Sort order defined in an alphanumeric list.
*
* @access private
* @param {string} $string-a
* @param {string} $string-b
* @return {list}
**/
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjc3MvbWl4aW5zLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0E7Ozs7Ozs7R0FPRztBQTZDSDs7Ozs7OztHQU9HO0FBT0g7Ozs7Ozs7Ozs7OztHQVlHO0FBZ0JIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3Qkc7QUFtQkg7Ozs7Ozs7Ozs7O0dBV0c7QUF5Qkg7Ozs7Ozs7R0FPRztBQWdDSDs7Ozs7OztHQU9HO0FBZ0JIOzs7Ozs7R0FNRztBQXFCSDs7Ozs7OztHQU9HO0FBa0JIOzs7Ozs7R0FNRztBQXVCSDs7Ozs7O0dBTUc7QUFNSDs7Ozs7OztHQU9HO0FBTUg7Ozs7OztHQU1HO0FBTUg7Ozs7Ozs7R0FPRztBQU1IOzs7Ozs7OztHQVFHIiwiZmlsZSI6Im1haW4uY3NzIn0= */